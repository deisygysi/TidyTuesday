filter(value == 1) %>%
select( - value) %>%
bind_rows(., PPI) %>%
filter(base != "RAIN") %>%
filter(base != "DIANA")
edges_ncippi %<>% pivot_wider(names_from = base,
values_from = base,
values_fn = length,
values_fill = 0)
edges_ncippi %>%
as.data.frame() %>%
upset(.,
nsets = 7,
order.by = c("degree", "freq"),
decreasing = c(TRUE,TRUE))
n = type_gene %>%
mutate(Category_cl = SubCategory) %>%
mutate(Category_cl = ifelse(Category_cl == "NULL", Category, Category_cl)) %>%
mutate(Category_cl = ifelse(Category_cl == "Protein Coding" & Symbol %in% TFs$`gene symbol`, "TF", Category_cl)) %>%
mutate(Category_cl = ifelse(Category_cl %in% c("lncRNA", "miRNA", "ncRNA","Protein Coding", "TF"), Category_cl, "other")) %>%
select(Symbol, Category_cl) %>%
dplyr::left_join(., PPI_annot)
genes =
data.frame(ID =c(PPI$Symbol_A,
PPI$Symbol_B,
edges_nci$Symbol_A,
edges_nci$Symbol_B)) %>%
unique()
n %<>% full_join(., genes,
by = c("Symbol"="ID"))
n$Category_cl[is.na(n$Category_cl)] <- "other"
gPPI = graph_from_data_frame(d = PPI,
directed = FALSE,
vertices = n) %>%
delete.vertices(., degree(.) == 0) %>%
simplify(., remove.loops = TRUE, remove.multiple = FALSE)
gNC = graph_from_data_frame(d = edges_nci,
directed = FALSE,
vertices = n) %>%
delete.vertices(., degree(.) == 0) %>%
simplify(., remove.loops = TRUE, remove.multiple = FALSE)
gPPInc = graph_from_data_frame(d = edges_ncippi,
directed = FALSE,
vertices = n) %>%
delete.vertices(., degree(.) == 0) %>%
simplify(., remove.loops = TRUE, remove.multiple = FALSE)
V(gPPI)$degree = degree(gPPI)
nPPI = as_data_frame(gPPI, what = "vertices")
# nPPI %>%
#   filter(Category_cl %ni% c("TF", "Protein Coding")) %>%
#   fwrite("~/Desktop/PostDoc/00_Projects/NonCodingPPI/output/PPI_nodes_notPT_TF.csv")
ddPPI = nPPI %>%
as_tibble() %>%
ungroup() %>%
group_by(Category_cl, degree) %>%
summarise(n = n())
p_ddPPI = ggplot(ddPPI) +
aes(x = degree, y = n, colour = Category_cl) +
geom_point(shape = "circle", size = 1.5, alpha = 0.5) +
scale_color_manual(
values = list(
`Protein Coding` = "#1B9E77",
TF = "#B16548",
lncRNA = "#D03792",
other = "#7FA718",
miRNA = "#BF8B12",
ncRNA = "#666666"
)
) +
#   scale_fill_manual(
#     values = list(
#       `Protein Coding` = "#66C2A5",
#       TF = "#CF948C",
#       lncRNA = "#D58EC4",
#       other = "#B7D84C",
#       miRNA = "#EFCC6B",
#       ncRNA = "#B3B3B3"
#     )) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
labs(x = "Degree", y = "log10(Nodes)", color = " ") +
theme_minimal() +
theme(legend.position = "bottom")
plotly::ggplotly(p_ddPPI)
Tuk = aov(nPPI$degree ~ nPPI$Category_cl)  %>%
TukeyHSD()
Tuk$`nPPI$Category_cl`%>%
as.data.frame() %>%
select(diff, `p adj`) %>%
arrange(`p adj`) %>%
kableExtra::kable()
par(mar = c(3,12,3,3))
Tuk %>%
plot(., las = 1)
V(gNC)$degree = degree(gNC)
nNC = as_data_frame(gNC, what = "vertices")
ddNC = nNC %>%
as_tibble() %>%
ungroup() %>%
group_by(Category_cl, degree) %>%
summarise(n = n())
p_ddNC = ggplot(ddNC) +
aes(x = degree, y = n, colour = Category_cl) +
geom_point(shape = "circle", size = 1.5, alpha = 0.3) +
scale_color_manual(
values = list(
`Protein Coding` = "#1B9E77",
TF = "#B16548",
lncRNA = "#D03792",
other = "#7FA718",
miRNA = "#BF8B12",
ncRNA = "#666666"
)
)  +
# scale_fill_manual(
#   values = list(
#     `Protein Coding` = "#66C2A5",
#     TF = "#CF948C",
#     lncRNA = "#D58EC4",
#     other = "#B7D84C",
#     miRNA = "#EFCC6B",
#     ncRNA = "#B3B3B3"
#   )) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
labs(x = "Degree", y = "log10(Nodes)", color = " ") +
theme_minimal() +
theme(legend.position = "bottom")
plotly::ggplotly(p_ddNC)
Tuk = aov(nNC$degree ~ nNC$Category_cl)  %>%
TukeyHSD()
Tuk$`nNC$Category_cl`%>%
as.data.frame() %>%
select(diff, `p adj`) %>%
arrange(`p adj`) %>%
kableExtra::kable()
par(mar = c(3,12,3,3))
Tuk %>%
plot(., las = 1)
V(gPPInc)$degree = degree(gPPInc)
nNCPPI = as_data_frame(gPPInc, what = "vertices")
ddNCPPI = nNCPPI %>%
as_tibble() %>%
ungroup() %>%
group_by(Category_cl, degree) %>%
summarise(n = n())
p_ddNCPPI = ggplot(ddNCPPI) +
aes(x = degree, y = n, colour = Category_cl) +
geom_point(shape = "circle", size = 1.5, alpha = 0.3) +
scale_color_manual(
values = list(
`Protein Coding` = "#1B9E77",
TF = "#B16548",
lncRNA = "#D03792",
other = "#7FA718",
miRNA = "#BF8B12",
ncRNA = "#666666"
)
)  +
# scale_fill_manual(
#   values = list(
#     `Protein Coding` = "#66C2A5",
#     TF = "#CF948C",
#     lncRNA = "#D58EC4",
#     other = "#B7D84C",
#     miRNA = "#EFCC6B",
#     ncRNA = "#B3B3B3"
#   )) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
labs(x = "Degree", y = "log10(Nodes)", color = " ") +
theme_minimal() +
theme(legend.position = "bottom")
plotly::ggplotly(p_ddNCPPI)
Tuk = aov(nNCPPI$degree ~ nNCPPI$Category_cl)  %>%
TukeyHSD()
Tuk$`nNCPPI$Category_cl`%>%
as.data.frame() %>%
select(diff, `p adj`) %>%
arrange(`p adj`) %>%
kableExtra::kable()
par(mar = c(3,12,3,3))
Tuk %>%
plot(., las = 1)
GDA = fread("~/Desktop/PostDoc/00_Projects/GDDA/New/output/GDA_18122020_ClassFromDisGeNet.csv")
GDA[is.na(GDA)]<-0
GDA %<>%
filter(Strong > 0 | Weak > 0 | Incompatible > 0)
GDA %<>% group_by(DiseaseName) %>%
mutate(Total_Genes = n()) %>%
filter(Total_Genes > 15)
GDA %<>% left_join(., n, by = c("hgnc_symbol"= "Symbol" ) )
GDA$Category_cl[is.na(GDA$Category_cl)] <- "other"
GDA_type = GDA %>%
select(DiseaseName, Category_cl) %>%
unique() %>%
group_by(Category_cl) %>%
summarise(n = n()) %>%
arrange(desc(n))
GDA_type$Category_cl %<>% factor(., levels = GDA_type$Category_cl)
p_gda_type =
GDA_type %>%
ggplot() +
aes(x = Category_cl, fill = Category_cl, weight = n) +
geom_bar() +
# scale_color_manual(
#   values = list(
#     `Protein Coding` = "#1B9E77",
#     TF = "#B16548",
#     lncRNA = "#D03792",
#     other = "#7FA718",
#     miRNA = "#BF8B12",
#     ncRNA = "#666666"
#   )
# )  +
scale_fill_manual(
values = list(
`Protein Coding` = "#66C2A5",
TF = "#CF948C",
lncRNA = "#D58EC4",
other = "#B7D84C",
miRNA = "#EFCC6B",
ncRNA = "#B3B3B3"
)) +
labs(x = "Gene Type", y = "# Diseases",
color = NULL,
fill = NULL) +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom")
plotly::ggplotly(p_gda_type)
GDA_Genes_per_disease = GDA %>%
group_by(DiseaseName, Category_cl) %>%
summarise(n = n())  %>%
ggplot() +
aes(
x = Category_cl,
y = n,
fill = Category_cl,
colour = Category_cl
) +
geom_boxplot(shape = "circle") +
labs(x = "Gene Type", y = "# Elements per Diseases",
color = NULL,
fill = NULL) +
scale_color_manual(
values = list(
`Protein Coding` = "#1B9E77",
TF = "#B16548",
lncRNA = "#D03792",
other = "#7FA718",
miRNA = "#BF8B12",
ncRNA = "#666666"
)
)  +
scale_fill_manual(
values = list(
`Protein Coding` = "#66C2A5",
TF = "#CF948C",
lncRNA = "#D58EC4",
other = "#B7D84C",
miRNA = "#EFCC6B",
ncRNA = "#B3B3B3"
)) +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom")
plotly::ggplotly(GDA_Genes_per_disease)
disease_selected = "asthma"
Disease = GDA %>%
ungroup() %>%
filter(DiseaseName == disease_selected) %>%
select(hgnc_symbol, Category_cl)
bar  = Disease %>%
group_by(Category_cl) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
mutate(Category_cl = factor(Category_cl, Category_cl)) %>%
ggplot() +
aes(x = Category_cl, fill = Category_cl, weight = n) +
labs(x = "Gene Type", y = "# Genes",
color = NULL,
fill = NULL) +
geom_bar() +
# scale_color_manual(
#   values = list(
#     `Protein Coding` = "#1B9E77",
#     TF = "#B16548",
#     lncRNA = "#D03792",
#     other = "#7FA718",
#     miRNA = "#BF8B12",
#     ncRNA = "#666666"
#   )
# )  +
scale_fill_manual(
values = list(
`Protein Coding` = "#66C2A5",
TF = "#CF948C",
lncRNA = "#D58EC4",
other = "#B7D84C",
miRNA = "#EFCC6B",
ncRNA = "#B3B3B3"
)) +
coord_flip() +
theme_minimal()
ggplotly(bar)
d_PPI = Disease %>%
filter(Category_cl %in% c("Protein Coding", "TF")) %>%
filter(hgnc_symbol %in% V(gPPI)$name)
d_nc = Disease %>%
filter(hgnc_symbol %in% V(gNC)$name)
d_ncPPI = Disease %>%
filter(hgnc_symbol %in% V(gPPInc)$name)
require(NetSci)
# N = 1000
N = 1000
B = 300
LCC_PPI = LCC_Significance(N = N,
Targets = d_PPI$hgnc_symbol,
G = gPPI,
bins = B)
hppi = Histogram_LCC2(LCC_PPI)
hppi
par(mar=c(0,0,0,0))
g = gPPI %>%
induced_subgraph(., d_PPI$hgnc_symbol) %>%
plot_lcc
g
require(tidygraph)
g %>% tidygraph::is.tbl_graph()
tidy_net <- tbl_graph(nodes = as_data_frame(g, what = "vertices"), edges = as_data_frame(g, what = "edges"), directed = F)
plot(tidy_net)
x = plot(tidy_net)
x
tidy_net
plot(tidy_net)
plot(tidy_net)
x = plot(tidy_net)
x
?tidygraph
tidy_net %>% ggraph::geom_edge_fan()
ggraph(tidy_net, 'matrix') +
geom_edge_point(mirror = TRUE) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_point(mirror = TRUE) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_arc() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_circle() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
#geom_edge_bend() +
geom_node_circle() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
#geom_edge_bend() +
#geom_node_circle() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
#geom_node_circle() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_point() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_label() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_circle() +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_circle(aes(size = size)) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_circle(aes(size = size), color = color) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_circle(aes(size = size, color = color)) +
theme_graph() +
coord_fixed()
?geom_node_circle
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_tile(aes(size = size, color = color)) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_point(aes(size = size, color = color)) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_point(aes(size = size),  color = color) +
theme_graph() +
coord_fixed()
ggraph(tidy_net) +
geom_edge_bend() +
geom_node_point(aes(size = size),  color = tidy_net$color) +
theme_graph() +
coord_fixed()
tidy_net[[1]]
setwd("~/Desktop/PostDoc/TidyTuesday/TidyTuesday/2021/Week21")
require(tidyr)
require(igraph)
require(dplyr)
require(magrittr)
require(ggplot2)
`%ni%` <- Negate(`%in%`)
tuesdata <- tidytuesdayR::tt_load('2021-05-18')
survey = tuesdata$survey
US = survey %>% filter(tolower(country) %in%
c("america", "usa")) %>%
mutate(gender = ifelse(gender %ni% c("Woman", "Man"), "Other", gender))
data_summary = US %>%
select(how_old_are_you,
gender,
race,
years_of_experience_in_field,
highest_level_of_education_completed,
industry, annual_salary) %>%
mutate(gender = ifelse(gender %ni% c("Woman", "Man"), "Other", gender)) %>%
na.exclude() %>%
group_by(
gender,
highest_level_of_education_completed,
) %>%
summarise(min_salary = min(annual_salary),
max_salary = max(annual_salary),
median_salary = median(annual_salary),
mean_salary = mean(annual_salary))
library(ggplot2)
p = data_summary %>%
ungroup() %>%
mutate(gender = factor(gender, levels = c(
"Man", "Woman", "Other"))) %>%
mutate(highest_level_of_education_completed =
factor(highest_level_of_education_completed,
levels = c("High School",
"Some college",
"College degree",
"Master's degree",
"PhD",
"Professional degree (MD, JD, etc.)" ))) %>%
ggplot() +
aes(x = highest_level_of_education_completed, fill = gender, colour = gender,
weight = median_salary) +
geom_bar(position = "dodge") +
scale_fill_manual(values = list(Man = "#AFD2E9",
Other = "#B1B695", Woman = "#A690A4")) +
scale_color_manual(values = list(Man = "#AFD2E9", Other = "#B1B695",
Woman = "#A690A4")) +
labs(x = "Education",
y = "Median Salary in USA",
title = "Does Education Pay?",
subtitle = "It does, mainly if you are not male.\nIf you are a women you are paied less, independent of your education.",
fill = "Gender",
color = "Gender",
caption =  "@GysiDeisy | #TidyTuesday \nSource: Ask a Manager Salary Survey"
) +
coord_flip() +
scale_y_continuous(labels = scales::label_number()) +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.title.y = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
plot.background = element_rect(fill = "#FCD0A1"),
panel.grid = element_line(color = NA)
)
png(filename = "result.png",
width = 40,
height = 30,
units = 'cm',
res = 400)
p
dev.off()
png(filename = "result.png",
width = 30,
height = 20,
units = 'cm',
res = 400)
p
dev.off()
